---
import { Picture } from "astro:assets";
import { Icon } from "astro-icon/components";

interface Props {
	id?: string;
	isCol?: boolean;
	color: string;
	bg: string;
	title: string;
	header: string | { icon: string };
	text?: string;
	image?: ImageMetadata;
	imageSide?: "left" | "right";
	breakOut?: "left" | "right" | false;
	button?: { link: string; text: string };
	cards?: { title: string; text: string; icon: string }[];
	quote?: { image: ImageMetadata; quote: string; author: string; position: string };
}
const {
	isCol = false,
	title,
	id,
	header,
	text,
	image,
	imageSide = "left",
	breakOut = false,
	button,
	cards,
	quote,
	bg,
	color,
} = Astro.props;
---

<section
	class={`${bg} ${bg === "bg-background-dark" && "text-text-dark"} scroll-mt-20 `}
	id={id ? id : title.toLowerCase()}
>
	<div class={`max-w-7xl mx-auto py-8 sm:py-24 overflow-clip xl:overflow-visible`}>
		<div
			class={`${isCol ? "md:flex md:flex-col" : "md:flex"} items-start ${imageSide === "left" ? "flex-row-reverse" : ""}`}
		>
			<div
				class={`h-full flex flex-col justify-between gap-4 sm:gap-8 px-4 sm:px-6 md:px-8 2xl:px-0 ${breakOut ? "md:flex-shrink-0 md:max-w-[min(50vw,450px)] md:pt-10" : "max-w-[51rem] mx-auto py-8 md:py-12"}`}
			>
				<div>
					{
						typeof header === "string" ? (
							<p
								class={`${bg === "bg-background-dark" ? "text-text-dark-mute" : "text-text-secondary"} text-lg font-semibold tracking-wide uppercase sm:text-xl/10`}
							>
								{header}
							</p>
						) : (
							<Icon name={header.icon} size="72" />
						)
					}
					<h2 class={`${color} inline-block text-transparent bg-clip-text`}>{title}</h2>
				</div>
				{text && <p>{text}</p>}
				<slot />
			</div>
			{
				image && (
					<div
						class={`${breakOut === "right" ? "break-right min-w-3/4" : breakOut === "left" ? "break-left min-w-3/4" : "mx-auto min-w-3/5"} mt-4 md:mt-2 ${isCol ? "mx-auto md:max-w-5xl" : ""} h-auto`}
					>
						<Picture
							src={image}
							alt={title}
							sizes="(max-width: 640px) 100vw, (max-width: 1280px) 80vw, 960px"
							formats={["avif", "webp"]}
							fallbackFormat="png"
							widths={[400, 800, 1200, image.width]}
							class="h-full w-full rounded-lg object-contain"
						/>
					</div>
				)
			}
		</div>
		{
			cards && cards.length > 0 && (
				<div class="mx-auto flex w-full max-w-7xl flex-col justify-between px-4 py-8 sm:flex-row sm:px-6 sm:py-12 md:px-8 2xl:px-0">
					{cards.map((card) => (
						<div class="space-y-2 p-4 text-base sm:p-6 sm:text-lg/8 sm:first:pl-0 sm:last:pr-0 md:w-96">
							<Icon name={card.icon} size="52" />
							<p class="mt-4 text-lg font-bold sm:text-xl">{card.title}</p>
							<p>{card.text}</p>
						</div>
					))}
				</div>
			)
		}
		{
			quote && (
				<figure class="border-text-secondary/20 relative mx-auto max-w-3xl border-y px-2 py-6 pt-0 sm:px-0 sm:pt-10">
					<figcaption class="border-l-accent-blue mt-6 space-y-4 border-l-4 text-center sm:border-0">
						<div class="mx-auto aspect-square h-20 w-auto">
							<Picture
								src={quote.image}
								alt={quote.author}
								sizes="200px"
								formats={["avif", "webp"]}
								fallbackFormat="png"
								widths={[400, 800, 1200]}
								class="h-full w-full rounded-lg object-cover"
							/>
						</div>
						<blockquote class="relative z-10 px-4 leading-relaxed sm:px-20 sm:text-center sm:text-lg">
							{quote.quote}
						</blockquote>
						<div
							class={`${bg === "bg-background-dark" ? "text-text-dark-mute" : "text-text-primary"} font-semibold`}
						>
							{quote.author}, {quote.position}
						</div>
					</figcaption>
				</figure>
			)
		}
		{
			button && button.link && (
				<a
					class={`${color.split(" ").pop()!.replace("to", "text")} mt-8 flex justify-center text-center text-xl underline underline-offset-4 hover:opacity-80 sm:mt-16 sm:text-2xl`}
					href={button.link}
				>
					{button.text} {"â€º"}
				</a>
			)
		}
	</div>
</section>
